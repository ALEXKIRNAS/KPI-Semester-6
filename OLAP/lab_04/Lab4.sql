-- CREATING STAGE TABLES

CREATE TABLE S_INVOICE  (
    ID_STUFF NUMBER,
    NAME VARCHAR2(64),
    SURNAME VARCHAR2(64),
    EMAIL VARCHAR2(64),
    INVOICE NUMBER,
    SUPPLIER VARCHAR2(128),
    PRODUCT VARCHAR2(128),
    QUANTITY NUMBER(10,2),
    PRICE INTEGER,
    INVOICE_DATE DATE
);

CREATE TABLE S_STORE  (
    NAME VARCHAR2(64),
    SURNAME VARCHAR2(64),
    SUPPLIER VARCHAR2(124),
    SHELF VARCHAR2(124),
    PRODUCT VARCHAR2(124),
    QUANTITY VARCHAR2(124),
    OPER_TYPE VARCHAR2(124),
    STORE_DATE DATE
);

-- CREATING DESTINATION TABLES

CREATE TABLE D_PAYMENT_TYPE
(
    ID_TYPE NUMBER NOT NULL,
    PAYMENT_TYPE_NAME VARCHAR2(128),
    DESCRIPTION VARCHAR2(256)
);
ALTER TABLE D_PAYMENT_TYPE
    ADD CONSTRAINT PK_D_PAYMENT_TYPE PRIMARY KEY (ID_TYPE);

CREATE TABLE D_POSITION
(
    ID_POSITION NUMBER NOT NULL,
    POSITION_NAME VARCHAR2(128) NOT NULL,
    SALARY NUMBER,
    DESCRIPTION VARCHAR2(1024)
);
ALTER TABLE D_POSITION
    ADD CONSTRAINT PK_D_POSITION PRIMARY KEY (ID_POSITION);

CREATE TABLE D_STUFF
(
    ID_STUFF NUMBER NOT NULL,
    ID_POSITION NUMBER NOT NULL,
    NAME VARCHAR2(64),
    SURNAME VARCHAR2(64),
    PHONE VARCHAR2(64),
    ADDRESS VARCHAR2(256),
    EMAIL VARCHAR2(64)
);
ALTER TABLE D_STUFF
    ADD CONSTRAINT PK_D_STUFF PRIMARY KEY (ID_STUFF);

CREATE TABLE D_INVOICE
(
    ID_INVOICE NUMBER NOT NULL,
    ID_TYPE NUMBER NOT NULL,
    ID_STUFF NUMBER NOT NULL,
    PURCHASE_TIME DATE
);
ALTER TABLE D_INVOICE
    ADD CONSTRAINT PK_D_INVOICE PRIMARY KEY (ID_INVOICE);

CREATE TABLE D_PRODUCT_TYPE
(
    ID_PRODUCT_TYPE NUMBER NOT NULL,   
    PRODUCT_TYPE_NAME VARCHAR2(128)
);
ALTER TABLE D_PRODUCT_TYPE
    ADD CONSTRAINT PK_D_PRODUCT_TYPE PRIMARY KEY (ID_PRODUCT_TYPE);

CREATE TABLE D_SUPPLIER
(
    ID_SUPPLIER NUMBER NOT NULL,
    SUPPLIER_NAME VARCHAR2(128),
    SUPPLIER_INFO VARCHAR2(1024)
);
ALTER TABLE D_SUPPLIER
    ADD CONSTRAINT PK_D_SUPPLIER PRIMARY KEY (ID_SUPPLIER);

CREATE TABLE D_UNIT
(
    ID_UNIT NUMBER NOT NULL,
    UNIT_NAME VARCHAR2(128),
    DESCRIPTION VARCHAR2(512)
);
ALTER TABLE D_UNIT
    ADD CONSTRAINT PK_D_UNIT PRIMARY KEY (ID_UNIT);

CREATE TABLE D_PRODUCT
(
    ID_PRODUCT NUMBER NOT NULL,
    ID_PRODUCT_TYPE NUMBER NOT NULL,
    ID_SUPPLIER NUMBER NOT NULL,
    ID_UNIT NUMBER NOT NULL,
    PRODUCT_NAME VARCHAR2(128) NOT NULL,
    DESCRIPTION VARCHAR2(128),
    PRICE INTEGER
);
ALTER TABLE D_PRODUCT
    ADD CONSTRAINT PK_D_PRODUCT PRIMARY KEY (ID_PRODUCT);

CREATE TABLE D_INVOICE_DETAIL
(
    ID_INVOICE NUMBER NOT NULL,
    ID_PRODUCT NUMBER NOT NULL,
    QUANTITY NUMBER(10,2) NOT NULL,
    DESCRIPTION VARCHAR2(500)
);
ALTER TABLE D_INVOICE_DETAIL
    ADD CONSTRAINT PK_D_INVOICE_DETAIL PRIMARY KEY (ID_INVOICE, ID_PRODUCT);

CREATE TABLE D_TYPE_OPER
(
    ID_OPER_TYPE INTEGER NOT NULL,
    NAME_OPER VARCHAR2(3) NOT NULL,
    DESCRIPTION VARCHAR2(100)
);
ALTER TABLE D_TYPE_OPER
    ADD CONSTRAINT PK_D_TYPE_OPER PRIMARY KEY (ID_OPER_TYPE);

CREATE TABLE D_STORE
(
    ID_STORE NUMBER NOT NULL,
    ID_PRODUCT NUMBER NOT NULL,
    SHELF VARCHAR2(10) NOT NULL,
    DATE_OPER DATE NOT NULL,
    ID_OPER_TYPE INTEGER NOT NULL,
    QUANTITY NUMBER NOT NULL
);
ALTER TABLE D_STORE
    ADD CONSTRAINT PK_D_STORE PRIMARY KEY (ID_STORE);
	
-- LOAD TO TABLE INVOIVE FROM INVOIVE

CREATE OR REPLACE PROCEDURE LOAD_INVOICE IS
    CURSOR C_INVOICE IS 
        SELECT DISTINCT
            ID_STUFF, 
            STAFF_NAME, 
            E_MAIL,
            INVOICE,
            SUPPLIER,
            PRODUCT,
            QUANTITY,
            PRICE,
            INVOICE_DATE
        FROM INVOICE
        WHERE REGEXP_LIKE (E_MAIL, '^[A-ZA-Z]+[A-ZA-Z0-9. ]+@[A-ZA-Z0-9.-]+\.[A-ZA-Z]{2,4}$')
            AND REGEXP_LIKE (SUPPLIER, '^[A-ZA-Z]')
            AND REGEXP_LIKE (PRODUCT, '^TV-+[0-9]+$')
            AND REGEXP_LIKE (INVOICE, '^INV-([0-9][0-9]|[0-9][0-9][0-9])$') 
            AND REGEXP_LIKE (QUANTITY, '^+[0-9]+$')
            AND REGEXP_LIKE (INVOICE_DATE, '^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$');
BEGIN
        FOR INVOICE_ROW IN C_INVOICE
            LOOP 
                INSERT INTO S_INVOICE (ID_STUFF, NAME, SURNAME, EMAIL, INVOICE, 
                    SUPPLIER, PRODUCT, QUANTITY, PRICE, INVOICE_DATE)
                    VALUES (INVOICE_ROW.ID_STUFF, REGEXP_SUBSTR (INVOICE_ROW.STAFF_NAME, '[^ ]+', 1, 1),
                        REGEXP_SUBSTR (INVOICE_ROW.STAFF_NAME, '[^ ]+', 1, 2), INVOICE_ROW.E_MAIL, 
                        REGEXP_SUBSTR (INVOICE_ROW.INVOICE, '[^-]+', 1, 2), INVOICE_ROW.SUPPLIER,
                        INVOICE_ROW.PRODUCT, INVOICE_ROW.QUANTITY, INVOICE_ROW.PRICE, INVOICE_ROW.INVOICE_DATE);
            END LOOP;
END;

-- LOAD TO TABLE STORE FROM STORE

CREATE OR REPLACE PROCEDURE LOAD_STORE IS
    CURSOR C_STORE IS 
        SELECT DISTINCT
            REGEXP_SUBSTR (STUFF_NAME, '[^ ]+', 1, 1) AS NAME, 
            REGEXP_SUBSTR (STUFF_NAME, '[^ ]+', 1, 2) AS SURNAME,
            SUPPLIER,
            SHELF, 
            PRODUCT,
            QUANTITY, 
            OPER_TYPE,
            STORE_DATE
        FROM STORE
        WHERE SHELF < 100 
            AND REGEXP_LIKE (STORE_DATE, '^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$')  
            AND REGEXP_LIKE(OPER_TYPE, '^+(IN|OUT)+$', 'i') 
            AND REGEXP_LIKE (QUANTITY, '^+[0-9]+$')
            AND REGEXP_LIKE (SUPPLIER, '^[a-zA-Z]+$')
            AND REGEXP_LIKE (PRODUCT, '^TV-+[0-9]+$')
            AND REGEXP_LIKE (REGEXP_SUBSTR (STUFF_NAME, '[^ ]+', 1, 1), '^[a-zA-Z]+$')
            AND REGEXP_LIKE (REGEXP_SUBSTR (STUFF_NAME, '[^ ]+', 1, 2), '^[a-zA-Z]+$');
BEGIN
    FOR STORE_ROW IN C_STORE
        LOOP
            INSERT INTO S_STORE (NAME, SURNAME, SUPPLIER, SHELF, PRODUCT, 
                QUANTITY, OPER_TYPE, STORE_DATE)
                VALUES (STORE_ROW.NAME, STORE_ROW.SURNAME, STORE_ROW.SUPPLIER,
                STORE_ROW.SHELF, STORE_ROW.PRODUCT, STORE_ROW.QUANTITY, STORE_ROW.OPER_TYPE, STORE_ROW.STORE_DATE);
        END LOOP;
END;

-- LOADING DATA TO STAGE TABLES

EXECUTE LOAD_INVOICE;
EXECUTE LOAD_STORE;

-- MERGE INTO DESTINATION TABLES

CREATE SEQUENCE STUFF_ID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE SUPPLIER_ID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE PRODUCT_ID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE OPER_TYPE_ID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE STORE_ID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

MERGE INTO D_STUFF D USING 
(
    SELECT DISTINCT 
        ID_STUFF, 
        NAME, 
        SURNAME, 
        EMAIL
    FROM S_INVOICE
) 
    S ON (S.ID_STUFF = D.ID_STUFF)
        WHEN MATCHED THEN
            UPDATE SET NAME = S.NAME, SURNAME = S.SURNAME, EMAIL = S.EMAIL
        WHEN NOT MATCHED THEN
            INSERT VALUES (S.ID_STUFF, 1, S.NAME, S.SURNAME, NULL, 
                NULL, S.EMAIL);

MERGE INTO D_STUFF D USING 
(
    SELECT DISTINCT 
        NAME, 
        SURNAME
    FROM S_STORE
) 
    S ON (S.NAME = D.NAME AND S.SURNAME = D.SURNAME)
        WHEN NOT MATCHED THEN
            INSERT VALUES (STUFF_ID.NEXTVAL, 1, S.NAME, S.SURNAME, NULL, 
                NULL, NULL);
                
MERGE INTO D_SUPPLIER D USING 
(
    SELECT DISTINCT 
         SUPPLIER
    FROM S_INVOICE
) 
    S ON (S.SUPPLIER = D.SUPPLIER_NAME)
        WHEN NOT MATCHED THEN
            INSERT VALUES (SUPPLIER_ID.NEXTVAL, S.SUPPLIER, NULL);

MERGE INTO D_SUPPLIER D USING 
(
    SELECT DISTINCT 
         SUPPLIER
    FROM S_STORE
) 
    S ON (S.SUPPLIER = D.SUPPLIER_NAME)
        WHEN NOT MATCHED THEN
            INSERT VALUES (SUPPLIER_ID.NEXTVAL, S.SUPPLIER, NULL);

MERGE INTO D_PRODUCT D USING 
(
    SELECT DISTINCT  
        T1.PRODUCT,
        T1.PRICE,
        T2.ID_SUPPLIER
    FROM S_INVOICE T1 
    JOIN D_SUPPLIER T2 
        ON (T1.SUPPLIER = T2.SUPPLIER_NAME)
)
    S ON (S.PRODUCT = D.PRODUCT_NAME AND D.ID_SUPPLIER = S.ID_SUPPLIER)
        WHEN MATCHED THEN
            UPDATE SET 
                PRICE = S.PRICE
        WHEN NOT MATCHED THEN
            INSERT VALUES (PRODUCT_ID.NEXTVAL, 1, S.ID_SUPPLIER, 1, 
                S.PRODUCT, NULL, S.PRICE);

MERGE INTO D_PRODUCT D USING 
(
    SELECT DISTINCT  
        T1.PRODUCT,
        T2.ID_SUPPLIER
    FROM S_STORE T1 
    JOIN D_SUPPLIER T2 
        ON (T1.SUPPLIER = T2.SUPPLIER_NAME)
)
    S ON (S.PRODUCT = D.PRODUCT_NAME AND D.ID_SUPPLIER = S.ID_SUPPLIER)
        WHEN NOT MATCHED THEN
            INSERT VALUES (PRODUCT_ID.NEXTVAL, 1, S.ID_SUPPLIER, 1, 
                S.PRODUCT, NULL, 1000);
                
MERGE INTO D_INVOICE D USING 
(
    SELECT DISTINCT 
        T1.INVOICE,  
        T1.ID_STUFF, 
        T1.INVOICE_DATE
    FROM S_INVOICE T1 
)
    S ON (D.ID_INVOICE = S.INVOICE)
        WHEN MATCHED THEN
            UPDATE SET ID_STUFF = S.ID_STUFF, PURCHASE_TIME = S.INVOICE_DATE
        WHEN NOT MATCHED THEN
            INSERT VALUES (S.INVOICE, 1, S.ID_STUFF, S.INVOICE_DATE);


MERGE INTO D_INVOICE_DETAIL D USING 
(
    SELECT DISTINCT 
        T1.INVOICE, 
        T3.ID_PRODUCT, 
        T1.QUANTITY
    FROM S_INVOICE T1 
    JOIN D_SUPPLIER T2
         ON (T1.SUPPLIER = T2.SUPPLIER_NAME)
    JOIN D_PRODUCT T3 
        ON (T1.PRODUCT = T3.PRODUCT_NAME AND T2.ID_SUPPLIER = T3.ID_SUPPLIER)
) 
    S ON (D.ID_INVOICE = S.INVOICE AND D.ID_PRODUCT = S.ID_PRODUCT)
        WHEN MATCHED THEN
            UPDATE SET QUANTITY = S.QUANTITY
        WHEN NOT MATCHED THEN
            INSERT VALUES (S.INVOICE, S.ID_PRODUCT, S.QUANTITY, NULL);

MERGE INTO D_TYPE_OPER D USING 
(
    SELECT DISTINCT 
        T1.OPER_TYPE
    FROM S_STORE T1
) 
    S ON (UPPER(D.NAME_OPER) = UPPER(S.OPER_TYPE))
        WHEN NOT MATCHED THEN
            INSERT VALUES (OPER_TYPE_ID.NEXTVAL, UPPER(S.OPER_TYPE), NULL);
            
MERGE INTO D_STORE D USING 
(
    SELECT DISTINCT  
        T2.ID_PRODUCT, 
        T1.SHELF, 
        T1.STORE_DATE, 
        T3.ID_OPER_TYPE, 
        T1.QUANTITY 
    FROM S_STORE T1
    JOIN D_SUPPLIER T4
         ON (T1.SUPPLIER = T4.SUPPLIER_NAME)
    JOIN D_PRODUCT T2 
        ON (T1.PRODUCT = T2.PRODUCT_NAME AND T2.ID_SUPPLIER = T4.ID_SUPPLIER)
    JOIN D_TYPE_OPER T3 
        ON (T3.NAME_OPER = UPPER(T1.OPER_TYPE))
) 
    S ON (D.ID_PRODUCT = S.ID_PRODUCT AND D.SHELF = S.SHELF AND D.DATE_OPER = S.STORE_DATE
        AND D.ID_OPER_TYPE = S.ID_OPER_TYPE)
        WHEN MATCHED THEN
            UPDATE SET QUANTITY = S.QUANTITY
        WHEN NOT MATCHED THEN
            INSERT VALUES (STORE_ID.NEXTVAL, S.ID_PRODUCT, S.SHELF, S.STORE_DATE, S.ID_OPER_TYPE, 
                S.QUANTITY);

-- SELECT FROM TABLES

SELECT * FROM D_STUFF;
SELECT * FROM D_SUPPLIER;
SELECT * FROM D_PRODUCT;
SELECT * FROM D_INVOICE;
SELECT * FROM D_INVOICE_DETAIL;
SELECT * FROM D_TYPE_OPER;
SELECT * FROM D_STORE;